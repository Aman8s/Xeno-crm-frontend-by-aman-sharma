import axios from 'axios';
import React, { useState, useEffect } from 'react';
import './CampaignBuilder.css';

function CampaignBuilder() {
  const [rules, setRules] = useState([{ field: '', operator: '', value: '' }]);
  const [audienceSize, setAudienceSize] = useState(null);
  const [isPreviewed, setIsPreviewed] = useState(false);
  const [aiPrompt, setAiPrompt] = useState('');
  const [loadingAI, setLoadingAI] = useState(false);

  const [goal, setGoal] = useState('');
  const [messageSuggestions, setMessageSuggestions] = useState([]);
  const [loadingMessages, setLoadingMessages] = useState(false);

  const [toast, setToast] = useState({ visible: false, message: '', type: '' });

  useEffect(() => {
    if (toast.visible) {
      const timer = setTimeout(() => {
        setToast({ ...toast, visible: false });
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [toast]);

  const handleChange = (index, field, value) => {
    const updated = [...rules];
    updated[index][field] = value;
    setRules(updated);
  };

  const addRule = () => {
    setRules([...rules, { field: '', operator: '', value: '' }]);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const res = await axios.post('http://localhost:5000/api/segments/preview', { rules });
      setAudienceSize(res.data.audienceSize);
      setIsPreviewed(true);
    } catch (err) {
      console.error('Error:', err.message);
      setAudienceSize(null);
      setToast({ visible: true, message: 'Failed to preview audience size.', type: 'error' });
    }
  };

  const handleSaveCampaign = async () => {
    try {
      const res = await axios.post('http://localhost:5000/api/campaigns', {
        rules,
        audienceSize
      });

      const campaignId = res.data._id;
      await axios.post(`http://localhost:5000/api/campaigns/deliver/${campaignId}`);

      setToast({ visible: true, message: 'Campaign saved and delivered successfully!', type: 'success' });

      setTimeout(() => {
        window.location.href = '/history';
      }, 1500);
    } catch (err) {
      console.error(err);
      setToast({ visible: true, message: 'Failed to save and deliver campaign.', type: 'error' });
    }
  };

  const generateRulesWithAI = async () => {
    try {
      setLoadingAI(true);
      const res = await axios.post('http://localhost:5000/api/ai/rules', {
        prompt: aiPrompt,
      });
      setRules(res.data.rules);
      setToast({ visible: true, message: 'Rules generated by AI successfully!', type: 'success' });
    } catch (err) {
      console.error(err);
      setToast({ visible: true, message: 'AI failed to generate rules.', type: 'error' });
    } finally {
      setLoadingAI(false);
    }
  };

  const generateMessageSuggestions = async () => {
    try {
      setLoadingMessages(true);
      const res = await axios.post('http://localhost:5000/api/ai/messages', {
        goal: goal,
      });
      setMessageSuggestions(res.data.messages);
      setToast({ visible: true, message: 'Messages generated successfully!', type: 'success' });
    } catch (err) {
      console.error(err);
      setToast({ visible: true, message: 'Failed to generate messages.', type: 'error' });
    } finally {
      setLoadingMessages(false);
    }
  };

  return (
    <div className="campaign-container">
      <h2 className="title">Create Campaign Segment</h2>
      
      <form onSubmit={handleSubmit} className="rules-form">
        {rules.map((rule, index) => (
          <div key={index} className="rule-card">
            <select
              className="form-select"
              value={rule.field}
              onChange={(e) => handleChange(index, 'field', e.target.value)}
            >
              <option value="">Select Field</option>
              <option value="totalSpend">Spend</option>
              <option value="visits">Visits</option>
            </select>

            <select
              className="form-select"
              value={rule.operator}
              onChange={(e) => handleChange(index, 'operator', e.target.value)}
            >
              <option value="">Operator</option>
              <option value=">">{'>'}</option>
              <option value="<">{'<'}</option>
              <option value="==">{'=='}</option>
            </select>

            <input
              className="form-input"
              type="number"
              value={rule.value}
              onChange={(e) => handleChange(index, 'value', e.target.value)}
              placeholder="Value"
            />
          </div>
        ))}

        <div className="button-group">
          <button type="button" onClick={addRule} className="btn secondary-btn">+ Add Rule</button>
          <button type="submit" className="btn primary-btn">Preview Audience</button>
        </div>
      </form>

      {audienceSize !== null && (
        <p className="audience-size"><strong>Estimated Audience Size:</strong> {audienceSize}</p>
      )}

      {isPreviewed && (
        <button onClick={handleSaveCampaign} className="btn success-btn">Save Campaign</button>
      )}

      <hr className="divider" />

  
      {/* === AI Message Suggestions === */}
      <h3>Generate Campaign Messages with AI</h3>
      <div className="ai-section">
        <input
          type="text"
          value={goal}
          onChange={(e) => setGoal(e.target.value)}
          className="ai-input"
          placeholder="e.g. Win back inactive users"
        />
        <button onClick={generateMessageSuggestions} disabled={loadingMessages} className="btn ai-btn">
          {loadingMessages ? 'Generating...' : 'Suggest Messages'}
        </button>
      </div>

      {messageSuggestions.length > 0 && (
        <ul className="suggestions-list">
          {messageSuggestions.map((msg, i) => (
            <li key={i} className="suggestion-item">{msg}</li>
          ))}
        </ul>
      )}

      {/* Toast popup */}
      {toast.visible && (
        <div className={`toast-message ${toast.type}`}>
          {toast.message}
        </div>
      )}
    </div>
  );
}

export default CampaignBuilder;
